[
   {
     "Prog": "int xtest1 = 0;\nint y = 0;\n\nint length = 20;\nint animDuration = 4000;\nint delay = 2000;\nrect test1 = createRect(0, length, length);\n\nmove(test1 , 200, 0, animDuration);\nwait(delay);\nmove(test1 , -200, 0, animDuration);",
     "Comment": "Invalid number of arguments create rect, given 3 arguments og 4",
     "ExceptionType": "InvalidNumberOfArgumentsException"
   },
   {
     "Prog": "int x = 0;\nint y = 0;\n\nint length = 20;\nint animDuration = 4000;\nint delay = 2000;\nrect test5fuck = createRect(0, 0, length, length);\n\nmove(200 , test5fuck, 0, animDuration);\nwait(delay);\nmove(test5fuck , -200, 0, animDuration);",
     "Comment": "Invalid type in move, should be int",
     "ExceptionType": "ArgumentTypeException"
   },
   {
     "Prog": "int length = 20;rect myRect1 = createRect(0, 0, length, length);\nint i = myRect1;",
     "Comment": "Invalid type parsing rect to int",
     "ExceptionType": "TypeException"
   },
   {
     "Prog": "int length = 20; rect myCoolRect = createCoolRect(0, 0, length, length);",
     "Comment": "Unknown builtins",
     "ExceptionType": "SyntacticException"
   },
   {
     "Prog": "int xtest8 = 0;\nint length = 20;\nint y = 0;\nint animDuration = 4000;\nint delay = 2000;\nrect test8ErrorRect = createRect(0, 0, 10, length);\nrect test8Error = createRect(test8ErrorRect, 0, 0, length);\nmove(test8Error , 200, 0, animDuration);\nwait(delay);\nmove(test8Error , -200, 0, animDuration);",
     "Comment": "Invalid type in create rect, input of type rect, should maybe be moved to ASTbuild testdata",
     "ExceptionType": "ArgumentTypeException"
   },
   {
     "Prog": "int xtest9 = 0;\nint y = 0;\n\nint length = 20;\nint animDuration = 4000;\nint delay = 2000;\nrect test9 = createRect(0, 0, length, length);\n\nmove(10, 200, 0, animDuration);\nwait(delay);\nmove(test9 , -200, 0, animDuration);",
     "Comment": "Invalid type in move, rect should be first argument, give num",
     "ExceptionType": "ArgumentTypeException"
   },
   {
     "Prog": "wait(0);",
     "Comment": "Calls an BuiltInAnimCallNode visit with a duration that is non-positive.",
     "ExceptionType": "NonPositiveAnimationDurationException"
   },
   {
     "Prog": "int duration = 0; wait(duration);",
     "Comment": "Calls an BuiltInAnimCallNode visit with a duration saved in the symboltable under an id that is non-positive.",
     "ExceptionType": "NonPositiveAnimationDurationException"
   },
   {
     "Prog": "int xtest2 = 0;\n int y = 0;\n \n int length = 20; \n int animDuration = 4000;\n int delay = 2000;\n rect test2 = createRect(0, 0, 0, length, length);\n \n move(test2 , 200, 0, animDuration);\n wait(delay);\n move(test2 , -200, 0, animDuration);",
     "Comment": "Invalid number of arguments create rect, given 5 arguments og 4",
     "ExceptionType": "InvalidNumberOfArgumentsException"
   },
   {
     "Prog": "int xtest3 = 0;\nint y = 0;\nint animDuration = 4000;\nint delay = 2000;\nint length = 20;\nrect test3Error = createRect(0, 0, 0, length);\n\nrect test3 = createRect(test3Error, 0, 0, length);\n\nmove(test3 , 200, 0, animDuration);\nwait(delay);\nmove(test3 , -200, 0, animDuration);",
     "Comment": "Invalid type in create rect, input of type rect as id",
     "ExceptionType": "ArgumentTypeException"
   },
   {
     "Prog": "int xtest4 = 0;\nint y = 0;\n\nint length = 20;\nint animDuration = 4000;\nint delay = 2000;\nrect test4 = createRect(0, 0, length, length);\n\nmove(test4, animDuration);\nwait(delay);",
     "Comment": "Invalid number of arguments in move, given 2 arguments og 3",
     "ExceptionType": "InvalidNumberOfArgumentsException"
   },
   {
     "Prog": "int xtest5 = 0;\nint y = 0;\n\nint length = 20;\nint animDuration = 4000;\nint delay = 2000;\nrect test5 = createRect(0, 0, length, length);\n\nmove(xtest5, 200, 0, animDuration);\nwait(delay);\nmove(test5 , -200, 0, animDuration);",
     "Comment": "Invalid type in move, rect should be first argument, give int id",
     "ExceptionType": "ArgumentTypeException"
   },
   {
     "Prog": "int xtest6 = 0;\nint y = 0;\n\nint length = 20;\nint animDuration = 4000;\nint delay = 2000;\nrect test6 = createRect(0, 0, length, length);\n\nmove(test6 , 200, 0, animDuration);\nwait(test6);\nmove(test6 , -200, 0, animDuration);",
     "Comment": "Invalid type in wait, should be int, but given type rect",
     "ExceptionType": "ArgumentTypeException"
   },
   {
     "Prog": "int length = 20;\nrect myRect1 = createRect(0, 0, length, length);\nint i = myRect1;",
     "Comment": "Invalid typed parsing rect to int, this throws nullException in the buildASTVisitor, but should actually be caught by the parser and should be in ASTbuild testdata",
     "ExceptionType": "TypeException"
   },
   {
     "Prog": "rect myrect1 = createRect(40, 40, 89, 84);\nmove(myrect1, 200, 0, 0);",
     "Comment": "Calls an BuiltInAnimCallNode visit with move with a duration as a numnode that is non-positive.",
     "ExceptionType": "NonPositiveAnimationDurationException"
   },  
   {
     "Prog": "int len = 20;\nrect myRect1 = createRect(0,0,len,len);\nrect myRect2 = createRect(40,40,len,len);\n\nint offsetX = 100;\nint offsetY = 100;\nint duration = 1500;\n\nloop(int i from 1 .. 4) {\n    paral {\n        if (i == 1) {\n            move(myRect1, offsetX, 0, duration);\n        }\n        move(myRect1, offsetX, 0, duration);\n        move(myRect2, offsetX, 0, duration);\n    }\n}",
     "Comment": "Using an if-statement inside a paral that is inside a loop",
     "ExceptionType": "SyntacticException"
   },  
   {
     "Prog": "int len = 20;\nrect myRect1 = createRect(0,0,len,len);\nrect myRect2 = createRect(40,40,len,len);\n\nint offsetX = 100;\nint offsetY = 100;\nint duration = 1500;\n\nparal {\n    loop (int i from 0 .. 6) {\n        move(myRect1, offsetX, offsetY, duration);\n    }\n}",
     "Comment": "Using a loop inside a paral",
     "ExceptionType": "SyntacticException"
   },
   {
     "Prog": "#Skal kaste argument type exception\nrect myRect = createRect(300, 300, 100, 100);\n\nmove(myRect, -100, 0, true + true);\n\nint i = 0;\nloop (int j from 0..i) {\n    i = j+1;\n    move(myRect, 0, 40, 200);\n    wait(100);\n    if (5) {\n        i = -1;\n    }\n}\n\nmove(myRect, 100, 0, 400);",
     "Comment": "Der gives en expression som evaluerer til bool som 4 argument til move",
     "ExceptionType": "ArgumentTypeException"
   },  
   {
     "Prog": "#Forventes DurationException\n\nrect middleRect = createRect(250, 100, 100, 200);\nrect movingRect = createRect(100, 100, 100, 100);\n\nloop (int i from 0..4) {\n    move(movingRect, 150, 0, 500);\n    wait(300);\n    move(movingRect, 0, 100, 1 - 1);\n    move(movingRect, 150, 0, 500);\n    move(movingRect, -150, 0, 500);\n    wait(300);\n    move(movingRect, 0, -100, 1 - 1);\n    move(movingRect, -150, 0, 500);\n}\n",
     "Comment": "Forventer at der kastes en NonPositiveAnimationDurationException, da duration i move sættes til en expr: 1 - 1",
     "ExceptionType": "NonPositiveAnimationDurationException"
   },   
  {
     "Prog": "#Forventes DurationException\n\n wait(1-1);",
     "Comment": "Forventer at der kastes en NonPositiveAnimationDurationException, da duration i wait sættes til en expr: 1 - 1",
     "ExceptionType": "NonPositiveAnimationDurationException"
   },  
   {
     "Prog": "#Forventer undeclared variable fejl \n\nrect middleRect = createRect(250, 100, 100, 200);\nrect movingRect = createRect(100, 100, 100, 100);\n\nloop (int j from 0..3) {\n\n}\n\nloop (int i from 0..j) {\n    move(movingRect, 150, 0, 500);\n    wait(300);\n    move(movingRect, 0, 100, 1 - 1);\n    move(movingRect, 150, 0, 500);\n    move(movingRect, -150, 0, 500);\n    wait(300);\n    move(movingRect, 0, -100, 1 - 1);\n    move(movingRect, -150, 0, 500);\n}\n",
     "Comment": "J eksisterer ikke i det scope den forsøges anvendt",
     "ExceptionType": "UndeclaredVariableException"
   },
  {
    "Prog": "#Forventer type exception i if. Men i stedet er den truthy\n\nif (5) {\n\n}",
    "Comment": "Forventer type exception i if",
    "ExceptionType": "TypeException"
  }, 
  {
    "Prog": "#Forventer VariableAlreadyDeclaredException\n\nint i = 0; int i = 2;",
    "Comment": "Forventer VariableAlreadyDeclaredException",
    "ExceptionType": "VariableAlreadyDeclaredException"
  },  
  {
    "Prog": "#Forventer VariableAlreadyDeclaredException\n\nint i = 0; int i = 2;",
    "Comment": "Forventer VariableAlreadyDeclaredException",
    "ExceptionType": "VariableAlreadyDeclaredException"
  }
  
 ]