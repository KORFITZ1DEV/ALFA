//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ALFA/ALFA.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class ALFALexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, ID=11, NUM=12, WS=13;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "ID", "NUM", "WS"
	};


	public ALFALexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public ALFALexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "';'", "'='", "'('", "')'", "'createRect'", "'move'", "'wait'", 
		"','", "'int'", "'rect'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, "ID", 
		"NUM", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ALFA.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ALFALexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,13,94,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,0,1,0,1,1,1,1,
		1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,
		5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,
		1,9,1,10,1,10,5,10,70,8,10,10,10,12,10,73,9,10,1,11,1,11,3,11,77,8,11,
		1,11,1,11,5,11,81,8,11,10,11,12,11,84,9,11,3,11,86,8,11,1,12,4,12,89,8,
		12,11,12,12,12,90,1,12,1,12,0,0,13,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,
		17,9,19,10,21,11,23,12,25,13,1,0,5,3,0,65,90,95,95,97,122,4,0,48,57,65,
		90,95,95,97,122,1,0,49,57,1,0,48,57,3,0,9,10,13,13,32,32,98,0,1,1,0,0,
		0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,
		0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,
		0,25,1,0,0,0,1,27,1,0,0,0,3,29,1,0,0,0,5,31,1,0,0,0,7,33,1,0,0,0,9,35,
		1,0,0,0,11,46,1,0,0,0,13,51,1,0,0,0,15,56,1,0,0,0,17,58,1,0,0,0,19,62,
		1,0,0,0,21,67,1,0,0,0,23,85,1,0,0,0,25,88,1,0,0,0,27,28,5,59,0,0,28,2,
		1,0,0,0,29,30,5,61,0,0,30,4,1,0,0,0,31,32,5,40,0,0,32,6,1,0,0,0,33,34,
		5,41,0,0,34,8,1,0,0,0,35,36,5,99,0,0,36,37,5,114,0,0,37,38,5,101,0,0,38,
		39,5,97,0,0,39,40,5,116,0,0,40,41,5,101,0,0,41,42,5,82,0,0,42,43,5,101,
		0,0,43,44,5,99,0,0,44,45,5,116,0,0,45,10,1,0,0,0,46,47,5,109,0,0,47,48,
		5,111,0,0,48,49,5,118,0,0,49,50,5,101,0,0,50,12,1,0,0,0,51,52,5,119,0,
		0,52,53,5,97,0,0,53,54,5,105,0,0,54,55,5,116,0,0,55,14,1,0,0,0,56,57,5,
		44,0,0,57,16,1,0,0,0,58,59,5,105,0,0,59,60,5,110,0,0,60,61,5,116,0,0,61,
		18,1,0,0,0,62,63,5,114,0,0,63,64,5,101,0,0,64,65,5,99,0,0,65,66,5,116,
		0,0,66,20,1,0,0,0,67,71,7,0,0,0,68,70,7,1,0,0,69,68,1,0,0,0,70,73,1,0,
		0,0,71,69,1,0,0,0,71,72,1,0,0,0,72,22,1,0,0,0,73,71,1,0,0,0,74,86,5,48,
		0,0,75,77,5,45,0,0,76,75,1,0,0,0,76,77,1,0,0,0,77,78,1,0,0,0,78,82,7,2,
		0,0,79,81,7,3,0,0,80,79,1,0,0,0,81,84,1,0,0,0,82,80,1,0,0,0,82,83,1,0,
		0,0,83,86,1,0,0,0,84,82,1,0,0,0,85,74,1,0,0,0,85,76,1,0,0,0,86,24,1,0,
		0,0,87,89,7,4,0,0,88,87,1,0,0,0,89,90,1,0,0,0,90,88,1,0,0,0,90,91,1,0,
		0,0,91,92,1,0,0,0,92,93,6,12,0,0,93,26,1,0,0,0,6,0,71,76,82,85,90,1,6,
		0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
